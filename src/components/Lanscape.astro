<div transition:persist id='landscape' class='w-[622px] h-[622px]'></div>

<script is:inline data-astro-rerun type='module'>
  import * as THREE from '../../node_modules/three/build/three.module.js'
  // controles de orbita
  import { OrbitControls } from '../../node_modules/three/examples/jsm/Addons.js'
  import { GLTFLoader } from '../../node_modules/three/examples/jsm/Addons.js'
  import { RGBELoader } from '../../node_modules/three/examples/jsm/Addons.js'

  const container = document.getElementById('landscape')
  // variables para el tamaño de la pantalla
  let w = container.clientWidth
  let h = container.clientHeight

  // creando la escena y la camara
  const scene = new THREE.Scene()
  const camera = new THREE.PerspectiveCamera(0.5, w / h, 10, 1000)

  // creando el renderizador
  const renderer = new THREE.WebGLRenderer({ antialias: true })
  // elemento DOM para renderizar

  let myModel

  function initThree() {
    // le damos tamaño al renderizador
    renderer.setSize(w, h)

    container?.appendChild(renderer.domElement)

    renderer.setClearColor(0xf6eedd)

    const orbit = new OrbitControls(camera, renderer.domElement)
    orbit.enableZoom = false

    // posición de la camara indicada por un vectror tridimensional
    camera.position.set(-20, 10, 10)
    orbit.update()

    // añadir luz direccional
    const light = new THREE.DirectionalLight(1)
    // posición de la luz
    light.position.set(-1, 3, 1)
    scene.add(light)

    // const helper = new THREE.DirectionalLightHelper(light, 5)
    // scene.add(helper)

    // const grid = new THREE.GridHelper(30, 30)
    // scene.add(grid)

    // configuraciónes adicionales
    renderer.toneMapping = THREE.ACESFilmicToneMapping
    // renderer.toneMappingExposure = 4

    // importación de nuestro modelo
    const gltfLoader = new GLTFLoader()
    const rgbLoader = new RGBELoader()

    // variable para guardar el modelo y podera animarlo

    // carga del archivo que nos ayudara con las luces y los reflejos

    gltfLoader.load('../../public/assets/scene.gltf', async function (gltf) {
      const model = await gltf.scene
      model.position.set(0, -0.06, 0)
      myModel = await model
      scene.add(model)
    })
  }

  function resize() {
    w = container.clientWidth
    h = container.clientHeight
    camera.aspect = w / h
    camera.updateProjectionMatrix() // método que se tiene que ejecutar
    // cada que se cambian los parametros de la camara
    renderer.setSize(w, h)
  }

  container.innerHTML = ''

  function animate() {
    requestAnimationFrame(animate)
    myModel.rotation.y += 0.001

    renderer.render(scene, camera)
  }
  window.addEventListener('resize', resize)
  // Esto solo se ejecuta una vez.
  initThree()
  renderer.setAnimationLoop(animate)
</script>
