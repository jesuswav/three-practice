<div id='landscape' class='w-[622px] h-[622px]'></div>

<script>
  import * as THREE from 'three'
  // controles de orbita
  import { OrbitControls } from 'three/examples/jsm/Addons.js'
  import { GLTFLoader } from 'three/examples/jsm/Addons.js'
  import { RGBELoader } from 'three/examples/jsm/Addons.js'

  // elemento DOM para renderizar
  const container = document.getElementById('landscape')

  // creando el renderizador
  const renderer = new THREE.WebGLRenderer({ antialias: true })

  // variables para el tamaño de la pantalla
  let w = container.clientWidth
  let h = container.clientHeight

  // le damos tamaño al renderizador
  renderer.setSize(w, h)

  container?.appendChild(renderer.domElement)

  // creando la escena y la camara
  const scene = new THREE.Scene()
  const camera = new THREE.PerspectiveCamera(0.5, w / h, 10, 1000)

  renderer.setClearColor(0xf6eedd)

  const orbit = new OrbitControls(camera, renderer.domElement)

  // posición de la camara indicada por un vectror tridimensional
  camera.position.set(-20, 10, 10)
  orbit.update()

  // añadir luz direccional
  const light = new THREE.DirectionalLight(1)
  // posición de la luz
  light.position.set(-1, 3, 1)
  scene.add(light)

  // const helper = new THREE.DirectionalLightHelper(light, 5)
  // scene.add(helper)

  // const grid = new THREE.GridHelper(30, 30)
  // scene.add(grid)

  // configuraciónes adicionales
  renderer.toneMapping = THREE.ACESFilmicToneMapping
  // renderer.toneMappingExposure = 4

  // importación de nuestro modelo
  const gltfLoader = new GLTFLoader()
  const rgbLoader = new RGBELoader()

  // variable para guardar el modelo y podera animarlo
  let myModel

  // carga del archivo que nos ayudara con las luces y los reflejos

  gltfLoader.load('../../public/assets/scene.gltf', function (gltf) {
    const model = gltf.scene
    model.position.set(0, -0.06, 0)
    myModel = model
    scene.add(model)
  })

  function resize() {
    h = window.innerHeight
    w = window.innerWidth
    camera.aspect = w / h
    camera.updateProjectionMatrix() // método que se tiene que ejecutar
    // cada que se cambian los parametros de la camara
    renderer.setSize(w, h)
  }

  function animate() {
    requestAnimationFrame(animate)
    myModel.rotation.y += 0.002

    renderer.render(scene, camera)
  }

  renderer.setAnimationLoop(animate)
  // window.addEventListener('resize', resize)
</script>
